# -*- coding: utf-8 -*-
"""A20001134_Sohila.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eSJRvDNZ2O90jJsOktHNVewhNi0eALEj
"""

import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from scipy.stats import pearsonr

data = pd.read_csv('/mnt/data/spotify_tracks_with_random_ratings.csv')

ratings_matrix = data.iloc[:, 1:].values

cosine_sim = cosine_similarity(ratings_matrix)

def top_k_users(similarity_matrix, k_percentage):
    k = int(np.ceil(similarity_matrix.shape[0] * k_percentage))
    top_k_indices = np.argsort(similarity_matrix, axis=1)[:, -k:]
    return top_k_indices

top_20_percent_users = top_k_users(cosine_sim, 0.2)

mean_user_ratings = ratings_matrix.mean(axis=1, keepdims=True)
predictions = []
for user_idx, similar_users in enumerate(top_20_percent_users):
    numerator = np.sum(cosine_sim[user_idx, similar_users][:, None] * ratings_matrix[similar_users], axis=0)
    denominator = np.sum(cosine_sim[user_idx, similar_users])
    prediction = numerator / (denominator + 1e-9)
    predictions.append(prediction)
predictions = np.array(predictions)

def compute_discounted_similarity(similarity_matrix, threshold):
    df = np.where(similarity_matrix > threshold, 1, 0.5)
    ds = similarity_matrix * df
    return ds

discounted_sim = compute_discounted_similarity(cosine_sim, threshold=0.5)

top_20_percent_users_ds = top_k_users(discounted_sim, 0.2)

predictions_ds = []
for user_idx, similar_users in enumerate(top_20_percent_users_ds):
    numerator = np.sum(discounted_sim[user_idx, similar_users][:, None] * ratings_matrix[similar_users], axis=0)
    denominator = np.sum(discounted_sim[user_idx, similar_users])
    prediction = numerator / (denominator + 1e-9)
    predictions_ds.append(prediction)
predictions_ds = np.array(predictions_ds)

comparison_top_users = np.array_equal(top_20_percent_users, top_20_percent_users_ds)

comparison_predictions = np.allclose(predictions, predictions_ds)

centered_ratings = ratings_matrix - mean_user_ratings
cosine_sim_centered = cosine_similarity(centered_ratings)

def compute_pearson_similarity(matrix):
    n_users = matrix.shape[0]
    pcc_sim = np.zeros((n_users, n_users))
    for i in range(n_users):
        for j in range(n_users):
            if i != j:
                pcc_sim[i, j] = pearsonr(matrix[i], matrix[j])[0]
    return pcc_sim

pcc_sim = compute_pearson_similarity(ratings_matrix)

results = {
    "1.1 Comparison": {
        "Top Users": comparison_top_users,
        "Predictions": comparison_predictions
    },
}

print(results)